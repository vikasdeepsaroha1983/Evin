{
	"name": "df_get_max_watermark",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_case_death_raw_adls",
						"type": "DatasetReference"
					},
					"name": "sourceTable"
				},
				{
					"dataset": {
						"referenceName": "ds_metadata",
						"type": "DatasetReference"
					},
					"name": "sourceControl"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_metadata",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "watermark"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     table_name as string",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceTable",
				"source(output(",
				"          schema_name as string,",
				"          table_name as string,",
				"          watermark_column as string,",
				"          last_watermark as timestamp,",
				"          is_active as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceControl",
				"sourceTable derive(tbl_name = $table_name) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(tbl_name),",
				"     created_on = max(created_on)) ~> aggregate1",
				"sourceControl, aggregate1 join(table_name == tbl_name,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(col_watermark = iif(last_watermark>created_on,last_watermark,created_on)) ~> watermark",
				"watermark select(mapColumn(",
				"          schema_name,",
				"          table_name,",
				"          watermark_column,",
				"          last_watermark = col_watermark,",
				"          is_active",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['metadata.csv'],",
				"     umask: 0222,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}
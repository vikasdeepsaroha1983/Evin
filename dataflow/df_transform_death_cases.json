{
	"name": "df_transform_death_cases",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "CasesAndDeathSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "countrySource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sink_processed_death_cases",
						"type": "DatasetReference"
					},
					"name": "sinkDeathCases"
				}
			],
			"transformations": [
				{
					"name": "filteredCases"
				},
				{
					"name": "selectDeathCases"
				},
				{
					"name": "pvCasesCntDeathcnt"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "finalSelect"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as short,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     dateFormats: ['yyyy-MM-dd']) ~> CasesAndDeathSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countrySource",
				"CasesAndDeathSource filter(continent=='Europe' && not(isNull(country_code))) ~> filteredCases",
				"filteredCases select(mapColumn(",
				"          country,",
				"          country_code,",
				"          continent,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reporting'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDeathCases",
				"selectDeathCases pivot(groupBy(country,",
				"          continent,",
				"          population,",
				"          source,",
				"          reportingdate,",
				"          country_code),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: false) ~> pvCasesCntDeathcnt",
				"pvCasesCntDeathcnt, countrySource lookup(pvCasesCntDeathcnt@country == countrySource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> finalSelect",
				"finalSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['death_cases.csv'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkDeathCases"
			]
		}
	}
}
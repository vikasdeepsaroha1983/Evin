{
	"name": "df_transform_hospital_adminissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admission",
						"type": "DatasetReference"
					},
					"name": "sourceHospitalAdminissions"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "sourceCountry"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date",
						"type": "DatasetReference"
					},
					"name": "SourceDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospitalization_data_daily",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hospitalization_data_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkWeekly"
				}
			],
			"transformations": [
				{
					"name": "split"
				},
				{
					"name": "ptDaily"
				},
				{
					"name": "selectHosptAdminissions"
				},
				{
					"name": "lkCountry"
				},
				{
					"name": "selectAfterLookup"
				},
				{
					"name": "aggregateDimDate"
				},
				{
					"name": "joinWeekly"
				},
				{
					"name": "ptWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "sortweekly"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceHospitalAdminissions",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceCountry",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceDate",
				"selectAfterLookup split(not(isNull(reported_date))\r",
				",",
				"     isNull(reported_date),",
				"     disjoint: false) ~> split@(splitDaily, splitWeekly)",
				"split@splitDaily pivot(groupBy(country,",
				"          source,",
				"          country_code_2_digit,",
				"          reported_date,",
				"          country_code_3_digit,",
				"          population),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> ptDaily",
				"sourceHospitalAdminissions select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectHosptAdminissions",
				"selectHosptAdminissions, sourceCountry lookup(selectHosptAdminissions@country == sourceCountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkCountry",
				"lkCountry select(mapColumn(",
				"          country = selectHosptAdminissions@country,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectAfterLookup",
				"SourceDate aggregate(groupBy(custYearWeek = concat(year, '-W',week_of_year)),",
				"     start_of_week = min(date),",
				"          end_of_week = max(date)) ~> aggregateDimDate",
				"split@splitWeekly, aggregateDimDate join(reported_year_week == custYearWeek,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWeekly",
				"joinWeekly pivot(groupBy(country,",
				"          reported_year_week,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          start_of_week,",
				"          end_of_week),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     {} = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> ptWeekly",
				"ptDaily sort(desc(reported_date, true),",
				"     asc(country, true)) ~> sortDaily",
				"ptWeekly sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortweekly",
				"sortDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDaily",
				"sortweekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkWeekly"
			]
		}
	}
}